{"version":3,"sources":["images/redo.svg","Pokedex.js","pokedexListing.js","PokeCard.js","Pokegame.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Pokedex","hand","this","props","player","deck","className","xp","isWinner","Component","pokedexListing","id","name","type","base_experience","PokeCard","pokemon","pokemonImg","src","Pokegame","state","counter","handleClick","bind","document","querySelector","classList","add","setState","cards","map","p","pokemonId","String","length","key","array","i","j","Math","floor","random","shuffle","hand1","slice","hand2","xp1","reduce","exp","xp2","animationIn","animationOut","isVisible","onClick","redo","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd7a166b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/redo.da0e97f8.svg\";","import React, { Component } from 'react'\nimport './Pokedex.css'\n\nclass Pokedex extends Component {\n  render () {\n    const hand = this.props.hand\n    const player = this.props.deck\n    return (\n      <div className='Pokedex text-center'>\n        <div className='Pokedex-details pt-5 d-flex align-items-center justify-content-between'>\n          <h4>Points: {this.props.xp}</h4>\n          <h2 className={this.props.isWinner ? 'winner' : 'loser'}>{this.props.isWinner ? 'Winning Hand' : 'Losing Hand'}</h2>\n        </div>\n        <div className='row align-items-center'>\n          <div className='Pokedex-player'>Player {player}</div>\n          {hand}\n        </div>\n      </div>\n    )\n  }\n}\nexport default Pokedex\n","const pokedexListing = [\n  { id: 4, name: 'Charmander', type: 'fire', base_experience: 62 },\n  { id: 7, name: 'Squirtle', type: 'water', base_experience: 63 },\n  { id: 11, name: 'Metapod', type: 'bug', base_experience: 72 },\n  { id: 12, name: 'Butterfree', type: 'flying', base_experience: 178 },\n  { id: 25, name: 'Pikachu', type: 'electric', base_experience: 112 },\n  { id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95 },\n  { id: 94, name: 'Gengar', type: 'poison', base_experience: 225 },\n  { id: 133, name: 'Eevee', type: 'normal', base_experience: 65 }\n]\nexport default pokedexListing\n","import React, { Component } from 'react'\nimport './PokeCard.css'\n\nclass PokeCard extends Component {\n  render () {\n    const pokemon = this.props\n    const pokemonImg = `https://assets.pokemon.com/assets/cms2/img/pokedex/detail/${pokemon.id}.png`\n    return (\n      <div className='col text-center mb-3'>\n        <div className='PokeCard'>\n          <div className='Pokecard-img-holder'>\n            <img className='Pokecard-img' src={pokemonImg} />\n          </div>\n          <div className='PokeCard-details'>\n            <h3 className='PokeCard-name pt-2'>{pokemon.name}</h3>\n            <p className='PokeCard-type pb-0'>Type: {pokemon.type}</p>\n            <p className='PokeCard-xp pb-2'>XP: {pokemon.xp}</p>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\nexport default PokeCard\n","import React, { Component } from 'react'\nimport Pokedex from './Pokedex'\nimport pokedexListing from './pokedexListing'\nimport PokeCard from './PokeCard'\nimport './Pokegame.css'\nimport {Animated} from \"react-animated-css\";\nimport redo from './images/redo.svg'\n\n\n\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\nclass Pokegame extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      counter: 0\n    }\n    this.handleClick = this.handleClick.bind(this)\n  }\n  static defaultProps = {\n    pokemon: pokedexListing\n  }\n\n  handleClick(){\n    const redoButton = document.querySelector('.Pokegame-redo')\n    redoButton.classList.add('active')\n    this.setState({\n      counter: 3\n    })\n  }\n  render() {\n    const cards = this.props.pokemon.map(function (p) {\n      let pokemonId = String(p.id)\n      while (pokemonId.length < 3) {\n        pokemonId = `0${pokemonId}`\n      }\n      return <PokeCard key={p.id} name={p.name} type={p.type} xp={p.base_experience} id={pokemonId} />\n    })\n    shuffle(cards)\n    const hand1 = cards.slice(0, 4)\n    const hand2 = cards.slice(4)\n    let xp1 = hand1.reduce((exp, pokemon)=> {\n      return exp + pokemon.props.xp\n    },0)\n    let xp2 = hand2.reduce((exp, pokemon)=> {\n      return exp + pokemon.props.xp\n    },0)\n    return (\n      <div className='game container'>\n        <Animated animationIn=\"fadeIn\" animationOut=\"fadeOut\" isVisible={true}>\n        <Pokedex deck={1} hand={hand1} xp={xp1} isWinner={(xp1 > xp2) ? true : false}/>\n        <Pokedex deck={2} hand={hand2} xp={xp2} isWinner={(xp2 > xp1) ? true : false}/>\n        </Animated>\n        <div onClick={()=>{this.handleClick()}} className=\"Pokegame-play-again d-flex align-items-center justify-content-center\">\n          <div >\n            Play Again\n          </div>\n          <img className='Pokegame-redo' src={redo}/>\n        </div>\n      </div>\n    )\n  }\n}\nexport default Pokegame\n","import React from 'react'\nimport Pokegame from './Pokegame'\nimport './App.css'\n\nfunction App () {\n  return (\n    <div>\n      <div className='small-screen-text d-flex-col text-center p-5'>\n        <p>Browser window is too small</p>\n        <p className='pt-4'>Please open on a desktop browser</p>\n        <p className='pt-4'> If you are using a desktop browser, please resize your browser window</p>\n      </div>\n      <Pokegame />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}